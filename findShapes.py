# from rovex import Rover

def contest_pop_loon() -> None:
    threshold_dist = 100
    threshold_angle = 10
    found_flats = []
    count = 0
    # data = [0.0, 0.0, 2417.75, 2396.75, 2393.75, 0.0, 333.25, 0.0, 2756.75, 2396.75, 2385.75, 2371.75, 1374.75, 2024.75, 328.25, 0.0, 0.0, 2359.75, 2356.0, 320.25, 320.25, 1841.0, 352.25, 1907.75, 1972.5, 318.5, 315.0, 315.0, 327.75, 327.75, 377.25, 662.0, 315.5, 315.0, 2385.25, 2406.25, 2419.75, 2453.5, 2490.25, 2502.25, 312.0, 2564.0, 2612.0, 2626.75, 2648.75, 2701.5, 2754.25, 2785.25, 342.25, 2867.0, 2935.5, 2960.5, 3001.25, 226.75, 221.25, 218.75, 331.25, 212.25, 206.75, 201.75, 199.75, 195.25, 192.25, 320.25, 189.5, 186.5, 183.5, 181.5, 180.5, 178.5, 176.5, 461.75, 173.5, 171.5, 169.5, 169.5, 171.5, 170.5, 169.5, 339.25, 167.5, 166.5, 166.5, 166.5, 165.5, 165.5, 336.75, 343.25, 163.5, 163.5, 163.5, 162.5, 162.5, 161.5, 179.0, 178.0, 149.0, 163.0, 163.5, 164.0, 163.5, 178.0, 164.5, 164.5, 165.5, 165.5, 167.5, 167.5, 167.5, 177.0, 170.5, 170.5, 171.5, 171.5, 172.5, 174.5, 174.5, 168.0, 167.5, 177.5, 179.5, 181.5, 182.5, 183.5, 164.5, 189.5, 190.5, 191.25, 194.25, 197.25, 199.25, 201.25, 171.0, 208.25, 210.25, 214.25, 223.75, 225.75, 223.25, 176.0, 230.25, 235.25, 247.75, 740.25, 1058.5, 1042.0, 452.75, 183.0, 253.75, 3856.5, 1643.75, 1626.25, 4159.25, 1617.25, 516.5, 274.5, 483.75, 466.25, 443.0, 441.5, 424.5, 412.5, 341.25, 403.5, 396.5, 391.5, 387.5, 384.5, 378.75, 373.75, 438.0, 369.75, 370.75, 369.75, 370.75, 368.75, 368.75, 372.75, 375.75, 378.75, 393.5, 560.5, 598.25, 601.25, 608.75, 342.25, 333.25, 623.75, 627.75, 631.75, 632.75, 632.75, 633.75, 333.75, 333.75, 640.5, 648.5, 657.5, 662.5, 664.5, 334.75, 336.75, 336.75, 1681.0, 999.75, 977.25, 976.25, 1019.25, 335.75, 335.75, 1681.5, 1749.75, 1759.25, 1262.75, 1255.75, 1252.25, 337.75, 742.75, 723.75, 723.25, 725.25, 733.25, 764.25, 339.25, 1837.5, 1857.75, 1867.25, 1342.25, 1321.0, 1238.75, 1228.75, 426.0, 330.25, 2073.5, 2084.0, 2104.75, 962.75, 934.0, 346.25, 966.25, 346.75, 2311.5, 2365.25, 4151.25, 779.5, 779.0, 346.75, 308.5, 757.25, 760.25, 762.25, 1189.0, 1193.0, 1196.5, 311.5, 1209.5, 1197.5, 1202.5, 1200.5, 1233.25, 1260.25, 313.0, 315.0, 1313.0, 1322.0, 3599.5, 3531.75, 2391.25, 3531.75, 317.0, 3517.25, 3517.25, 2276.75, 3369.5, 3499.0, 3496.5, 2000.75, 1998.75, 3503.0, 3512.75, 3512.25, 3522.25, 3524.25, 2930.25, 623.25, 623.75, 624.75, 622.75, 631.75, 3761.75, 3740.0, 3685.25, 940.0, 938.0, 937.5, 965.25, 3845.5, 3831.5, 3859.0, 3893.75, 4004.0, 1919.0, 1790.5, 1783.75, 1707.5, 1712.5, 4103.5, 4136.5, 4195.75, 4231.5, 4268.5, 4326.25, 1014.75, 501.75, 493.75, 483.25, 480.25, 491.25, 498.25, 506.25, 5724.25, 132.0, 4992.0, 5893.5, 1061.5, 806.5, 792.5, 793.0, 797.0, 806.0, 821.0, 1769.75, 2791.75, 2788.75, 0.0, 1304.5, 0.0, 0.0, 0.0, 2817.5, 2864.0, 4750.0, 0.0, 315.0, 0.0, 0.0, 1312.0, 6529.0, 2464.0, 1224.25, 0.0, 313.0, 0.0, 0.0, 2457.0, 2440.0, 2432.5, 0.0, 337.25, 0.0]
    data = [0.0, 0.0, 803.0, 796.0, 1388.25, 117.25, 0.0, 0.0, 109.25, 2396.25, 794.0, 786.0, 113.25, 113.25, 103.75, 104.75, 105.75, 785.0, 321.25, 320.25, 112.25, 117.25, 120.25, 121.75, 121.75, 319.25, 317.5, 319.75, 325.75, 104.25, 109.25, 814.5, 797.5, 315.0, 314.0, 818.0, 828.0, 836.75, 839.75, 854.75, 867.75, 317.0, 886.75, 897.5, 914.5, 931.5, 938.5, 951.5, 972.25, 350.25, 1003.25, 1018.25, 1042.0, 1070.0, 1081.0, 1098.75, 1128.75, 331.75, 1172.5, 1195.5, 1237.25, 1281.0, 1297.0, 1328.0, 339.75, 1432.5, 1453.5, 1497.75, 1562.5, 1640.75, 1668.0, 1721.25, 339.75, 1920.5, 1956.5, 2037.25, 2171.5, 2338.5, 339.75, 2508.75, 337.75, 2904.25, 2975.0, 2992.0, 3294.75, 4007.0, 337.75, 342.25, 336.25, 330.75, 329.75, 328.75, 321.75, 320.75, 319.75, 178.0, 317.0, 316.0, 315.0, 315.0, 313.0, 312.0, 173.0, 311.0, 311.0, 313.0, 313.0, 312.0, 312.0, 313.0, 169.0, 313.0, 314.0, 315.0, 315.0, 315.0, 317.0, 318.0, 167.5, 318.75, 320.75, 322.75, 322.75, 324.75, 326.75, 167.5, 328.75, 330.75, 332.75, 333.75, 335.75, 338.75, 342.75, 124.25, 346.75, 350.75, 354.75, 355.75, 355.75, 362.75, 369.75, 322.25, 380.75, 383.5, 371.25, 357.25, 358.75, 399.5, 250.75, 390.0, 384.5, 377.75, 372.75, 370.75, 367.75, 362.75, 297.5, 356.75, 354.75, 350.75, 352.75, 349.75, 347.75, 374.25, 342.75, 341.75, 340.75, 338.75, 337.75, 336.75, 335.75, 334.75, 333.75, 332.75, 332.75, 331.75, 330.75, 330.75, 329.75, 332.75, 327.75, 327.75, 328.75, 329.75, 329.75, 329.75, 337.25, 331.75, 333.75, 333.75, 334.75, 335.75, 336.75, 338.75, 333.75, 342.75, 346.75, 348.75, 356.75, 333.75, 334.25, 334.75, 336.75, 2113.25, 5319.75, 5344.75, 5367.5, 2188.0, 2309.0, 335.75, 2316.0, 5485.0, 1955.0, 1968.5, 5877.5, 336.75, 3460.0, 337.75, 1228.75, 1211.75, 1210.5, 1216.25, 1542.5, 1537.0, 1570.0, 338.75, 2249.75, 2248.25, 2320.0, 2439.0, 2512.75, 352.75, 1086.25, 1064.5, 1066.0, 1073.0, 1089.75, 4507.0, 4539.75, 4435.75, 346.75, 1072.5, 1084.75, 1363.25, 4219.0, 4211.0, 347.75, 309.5, 4173.25, 4135.0, 3068.5, 2554.5, 2543.75, 3984.0, 2866.5, 312.5, 3930.25, 1797.5, 1905.75, 1943.5, 3829.5, 3649.25, 3855.0, 315.0, 3825.5, 3809.25, 3792.25, 3791.25, 3791.25, 3788.25, 318.75, 3756.5, 3767.25, 3755.5, 3754.5, 3753.5, 3756.5, 3771.25, 3768.25, 3770.25, 3770.25, 3770.25, 3781.25, 3803.25, 3792.25, 3809.25, 3819.25, 3828.0, 3825.0, 3851.0, 3851.0, 3852.0, 3841.0, 3880.0, 3866.0, 3894.75, 3946.25, 4133.5, 2437.0, 2764.75, 1637.25, 1603.25, 1578.5, 1535.0, 1506.25, 1436.5, 1382.75, 1327.0, 1312.0, 1276.0, 1232.25, 1189.5, 1181.5, 1152.5, 1119.75, 1086.75, 1079.0, 1056.0, 1030.0, 1004.25, 996.25, 980.25, 958.25, 937.5, 933.5, 919.5, 900.5, 883.75, 879.75, 867.75, 864.75, 853.75, 850.75, 841.75, 112.25, 117.25, 113.25, 112.25, 111.25, 835.75, 829.75, 827.0, 117.25, 111.25, 0.0, 0.0, 0.0, 826.0, 818.0, 123.25, 0.0, 110.25, 0.0, 0.0, 814.0, 810.0, 806.0, 120.25, 0.0, 110.25]

    print("running")
    for angle,point in enumerate(data):
        if angle > 0 and angle < 360:
            delta_distance = abs(data[angle] - data[angle-1])
            if delta_distance < threshold_dist:
                count +=1
            else:
                if count > threshold_angle:
                    found_flats.append([count,start_angle,angle,point])
                start_angle = angle+1
                count = 0
    print(found_flats)

    # rover.setSpeeds()

if __name__ == "__main__":
    contest_pop_loon()


