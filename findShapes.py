import enum

class Flat(enum.IntEnum):
    points = 0
    start_angle = 1
    end_angle = 2
    dist = 3

def contest_pop_loon(data : list = None) -> tuple:
    speed1 = 132
    speed2 = 122


    #data = [0.0, 0.0, 803.0, 796.0, 1388.25, 117.25, 0.0, 0.0, 109.25, 2396.25, 794.0, 786.0, 113.25, 113.25, 103.75, 104.75, 105.75, 785.0, 321.25, 320.25, 112.25, 117.25, 120.25, 121.75, 121.75, 319.25, 317.5, 319.75, 325.75, 104.25, 109.25, 814.5, 797.5, 315.0, 314.0, 818.0, 828.0, 836.75, 839.75, 854.75, 867.75, 317.0, 886.75, 897.5, 914.5, 931.5, 938.5, 951.5, 972.25, 350.25, 1003.25, 1018.25, 1042.0, 1070.0, 1081.0, 1098.75, 1128.75, 331.75, 1172.5, 1195.5, 1237.25, 1281.0, 1297.0, 1328.0, 339.75, 1432.5, 1453.5, 1497.75, 1562.5, 1640.75, 1668.0, 1721.25, 339.75, 1920.5, 1956.5, 2037.25, 2171.5, 2338.5, 339.75, 2508.75, 337.75, 2904.25, 2975.0, 2992.0, 3294.75, 4007.0, 337.75, 342.25, 336.25, 330.75, 329.75, 328.75, 321.75, 320.75, 319.75, 178.0, 317.0, 316.0, 315.0, 315.0, 313.0, 312.0, 173.0, 311.0, 311.0, 313.0, 313.0, 312.0, 312.0, 313.0, 169.0, 313.0, 314.0, 315.0, 315.0, 315.0, 317.0, 318.0, 167.5, 318.75, 320.75, 322.75, 322.75, 324.75, 326.75, 167.5, 328.75, 330.75, 332.75, 333.75, 335.75, 338.75, 342.75, 124.25, 346.75, 350.75, 354.75, 355.75, 355.75, 362.75, 369.75, 322.25, 380.75, 383.5, 371.25, 357.25, 358.75, 399.5, 250.75, 390.0, 384.5, 377.75, 372.75, 370.75, 367.75, 362.75, 297.5, 356.75, 354.75, 350.75, 352.75, 349.75, 347.75, 374.25, 342.75, 341.75, 340.75, 338.75, 337.75, 336.75, 335.75, 334.75, 333.75, 332.75, 332.75, 331.75, 330.75, 330.75, 329.75, 332.75, 327.75, 327.75, 328.75, 329.75, 329.75, 329.75, 337.25, 331.75, 333.75, 333.75, 334.75, 335.75, 336.75, 338.75, 333.75, 342.75, 346.75, 348.75, 356.75, 333.75, 334.25, 334.75, 336.75, 2113.25, 5319.75, 5344.75, 5367.5, 2188.0, 2309.0, 335.75, 2316.0, 5485.0, 1955.0, 1968.5, 5877.5, 336.75, 3460.0, 337.75, 1228.75, 1211.75, 1210.5, 1216.25, 1542.5, 1537.0, 1570.0, 338.75, 2249.75, 2248.25, 2320.0, 2439.0, 2512.75, 352.75, 1086.25, 1064.5, 1066.0, 1073.0, 1089.75, 4507.0, 4539.75, 4435.75, 346.75, 1072.5, 1084.75, 1363.25, 4219.0, 4211.0, 347.75, 309.5, 4173.25, 4135.0, 3068.5, 2554.5, 2543.75, 3984.0, 2866.5, 312.5, 3930.25, 1797.5, 1905.75, 1943.5, 3829.5, 3649.25, 3855.0, 315.0, 3825.5, 3809.25, 3792.25, 3791.25, 3791.25, 3788.25, 318.75, 3756.5, 3767.25, 3755.5, 3754.5, 3753.5, 3756.5, 3771.25, 3768.25, 3770.25, 3770.25, 3770.25, 3781.25, 3803.25, 3792.25, 3809.25, 3819.25, 3828.0, 3825.0, 3851.0, 3851.0, 3852.0, 3841.0, 3880.0, 3866.0, 3894.75, 3946.25, 4133.5, 2437.0, 2764.75, 1637.25, 1603.25, 1578.5, 1535.0, 1506.25, 1436.5, 1382.75, 1327.0, 1312.0, 1276.0, 1232.25, 1189.5, 1181.5, 1152.5, 1119.75, 1086.75, 1079.0, 1056.0, 1030.0, 1004.25, 996.25, 980.25, 958.25, 937.5, 933.5, 919.5, 900.5, 883.75, 879.75, 867.75, 864.75, 853.75, 850.75, 841.75, 112.25, 117.25, 113.25, 112.25, 111.25, 835.75, 829.75, 827.0, 117.25, 111.25, 0.0, 0.0, 0.0, 826.0, 818.0, 123.25, 0.0, 110.25, 0.0, 0.0, 814.0, 810.0, 806.0, 120.25, 0.0, 110.25]

    flats = get_flats(data)

    print(flats)

    for flat in flats:
        if flat[Flat.end_angle] > 180 and flat[Flat.start_angle] < 180:
            if data[180] > 200:
                drive_to_flat_L_end(flat)
            return 127,127


def drive_to_flat_L_end(flat:list):
    if flat[Flat.start_angle] == 180:
        return speed1,speed1
    if flat[Flat.start_angle] < 180:
        return speed2,speed1

def drive_to_flat_R_end(flat:list):
    if flat[Flat.start_angle] == 180:
        return speed1,speed1
    if flat[Flat.end_angle] > 180:
        return speed1,speed2


def get_flats(data):
    threshold_dist = 100
    threshold_angle = 10
    found_flats = []
    count = 0
    previous_dist = abs(data[0])
    #reduce FOV to 180Â°
    data = data[90:270]

    for angle,point in enumerate(data):
        if angle > 0 and angle < len(data) + 1:
            delta_distance =abs(data[angle] - data[angle-1])
            if delta_distance < threshold_dist:
                count +=1
            else:
                previous_dist = abs(data[angle-1])
                if abs(previous_dist - data[angle+3]) > threshold_dist:
                    if count > threshold_angle:
                        #forman: amaunt of points in flat, start angle of flat, end angle of flat, distance
                        found_flats.append([count,start_angle,angle,point])
                    start_angle = angle+1
                    count = 0
    return found_flats


if __name__ == "__main__":
    contest_pop_loon()


