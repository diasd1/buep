import enum

class Flat(enum.IntEnum):
    points = 0
    start_angle = 1
    end_angle = 2
    dist = 3

speed1 = 132
speed2 = 122
front_angle = 90

def contest_pop_loon(data : list = None) -> tuple:
    #data = [0.0, 0.0, 1156.0, 1139.25, 1131.75, 0.0, 0.0, 329.25, 0.0, 1143.25, 1150.0, 314.5, 316.5, 0.0, 0.0, 0.0, 347.25, 312.5, 311.5, 311.0, 315.0, 319.75, 320.75, 0.0, 318.75, 311.5, 311.0, 309.0, 0.0, 0.0, 1055.5, 2048.5, 315.0, 322.75, 344.25, 323.75, 3115.5, 5120.5, 5132.5, 5357.0, 347.25, 344.75, 1377.25, 1374.75, 707.75, 706.75, 701.0, 711.25, 334.75, 323.75, 6934.5, 1484.75, 1521.25, 2554.5, 2565.5, 331.75, 3985.5, 338.75, 359.25, 1198.0, 2591.5, 2598.0, 4632.5, 338.75, 337.75, 5461.25, 2606.5, 7971.5, 4375.5, 9741.75, 3545.75, 336.75, 335.75, 507.25, 3357.5, 4928.25, 505.25, 504.25, 336.75, 1832.0, 1807.0, 505.25, 1839.0, 2268.75, 2330.5, 2330.0, 334.75, 2387.75, 2973.0, 3598.5, 1898.25, 1876.25, 1919.0, 4744.0, 4647.5, 2175.0, 2249.25, 2403.25, 1633.25, 1648.75, 2336.5, 177.0, 2350.0, 2414.75, 2264.75, 2174.0, 1835.5, 1858.75, 659.0, 169.0, 622.75, 600.75, 589.75, 578.75, 560.0, 540.0, 164.5, 526.0, 511.0, 504.25, 497.25, 484.25, 472.25, 466.25, 166.25, 451.25, 441.5, 437.5, 432.5, 424.5, 417.5, 413.5, 110.25, 402.5, 396.5, 394.5, 391.5, 386.5, 386.5, 188.0, 381.75, 376.75, 372.75, 370.75, 368.75, 364.75, 363.75, 263.5, 358.75, 356.75, 354.75, 353.75, 350.75, 349.75, 317.5, 347.75, 345.75, 344.75, 344.75, 343.75, 342.75, 341.75, 404.0, 341.75, 340.75, 341.75, 341.75, 341.75, 341.75, 342.75, 342.75, 343.75, 343.75, 345.75, 345.75, 346.75, 348.75, 350.75, 351.75, 352.75, 354.75, 357.75, 358.75, 359.75, 362.75, 366.75, 339.25, 369.75, 373.75, 375.75, 377.75, 381.75, 340.25, 338.75, 338.75, 392.5, 397.5, 399.5, 402.5, 408.5, 338.75, 341.75, 422.5, 430.5, 437.5, 441.5, 445.5, 455.25, 340.75, 338.75, 475.25, 486.25, 498.25, 504.25, 511.0, 342.75, 538.0, 546.0, 554.0, 571.0, 590.25, 600.25, 511.5, 1171.0, 350.75, 597.25, 593.25, 583.75, 579.75, 575.75, 350.75, 561.0, 317.5, 555.0, 549.0, 543.0, 541.0, 538.0, 312.5, 529.0, 526.0, 525.0, 521.0, 518.0, 517.0, 514.0, 315.5, 510.0, 510.0, 509.25, 508.25, 507.25, 506.25, 318.75, 505.25, 504.25, 505.25, 504.25, 504.25, 505.25, 505.25, 322.75, 506.25, 506.25, 507.25, 508.25, 510.0, 511.0, 512.0, 514.0, 517.0, 519.0, 520.0, 524.0, 527.0, 529.0, 532.0, 536.0, 541.0, 544.0, 547.0, 552.0, 559.0, 562.0, 565.0, 572.0, 579.75, 582.75, 586.75, 595.75, 604.75, 609.75, 614.75, 624.75, 636.75, 641.5, 648.5, 661.5, 666.5, 674.5, 689.5, 704.25, 712.25, 722.25, 729.25, 740.25, 757.25, 759.25, 780.0, 803.0, 824.0, 826.0, 853.75, 881.75, 895.5, 2281.75, 2306.5, 2397.75, 2510.25, 2557.0, 2623.75, 2748.25, 2903.75, 3034.25, 3064.0, 3323.5, 3438.25, 968.75, 964.75, 965.25, 1041.5, 955.0, 964.25, 966.25, 973.25, 0.0, 0.0, 0.0, 4047.75, 969.25, 990.25, 311.0, 315.0, 335.25, 0.0, 0.0, 0.0, 0.0, 4060.75, 0.0, 0.0, 346.75, 0.0, 0.0, 4041.75, 4036.75, 1153.0, 0.0, 0.0, 340.75]

    #data = [0.0, 0.0, 803.0, 796.0, 1388.25, 117.25, 0.0, 0.0, 109.25, 2396.25, 794.0, 786.0, 113.25, 113.25, 103.75, 104.75, 105.75, 785.0, 321.25, 320.25, 112.25, 117.25, 120.25, 121.75, 121.75, 319.25, 317.5, 319.75, 325.75, 104.25, 109.25, 814.5, 797.5, 315.0, 314.0, 818.0, 828.0, 836.75, 839.75, 854.75, 867.75, 317.0, 886.75, 897.5, 914.5, 931.5, 938.5, 951.5, 972.25, 350.25, 1003.25, 1018.25, 1042.0, 1070.0, 1081.0, 1098.75, 1128.75, 331.75, 1172.5, 1195.5, 1237.25, 1281.0, 1297.0, 1328.0, 339.75, 1432.5, 1453.5, 1497.75, 1562.5, 1640.75, 1668.0, 1721.25, 339.75, 1920.5, 1956.5, 2037.25, 2171.5, 2338.5, 339.75, 2508.75, 337.75, 2904.25, 2975.0, 2992.0, 3294.75, 4007.0, 337.75, 342.25, 336.25, 330.75, 329.75, 328.75, 321.75, 320.75, 319.75, 178.0, 317.0, 316.0, 315.0, 315.0, 313.0, 312.0, 173.0, 311.0, 311.0, 313.0, 313.0, 312.0, 312.0, 313.0, 169.0, 313.0, 314.0, 315.0, 315.0, 315.0, 317.0, 318.0, 167.5, 318.75, 320.75, 322.75, 322.75, 324.75, 326.75, 167.5, 328.75, 330.75, 332.75, 333.75, 335.75, 338.75, 342.75, 124.25, 346.75, 350.75, 354.75, 355.75, 355.75, 362.75, 369.75, 322.25, 380.75, 383.5, 371.25, 357.25, 358.75, 399.5, 250.75, 390.0, 384.5, 377.75, 372.75, 370.75, 367.75, 362.75, 297.5, 356.75, 354.75, 350.75, 352.75, 349.75, 347.75, 374.25, 342.75, 341.75, 340.75, 338.75, 337.75, 336.75, 335.75, 334.75, 333.75, 332.75, 332.75, 331.75, 330.75, 330.75, 329.75, 332.75, 327.75, 327.75, 328.75, 329.75, 329.75, 329.75, 337.25, 331.75, 333.75, 333.75, 334.75, 335.75, 336.75, 338.75, 333.75, 342.75, 346.75, 348.75, 356.75, 333.75, 334.25, 334.75, 336.75, 2113.25, 5319.75, 5344.75, 5367.5, 2188.0, 2309.0, 335.75, 2316.0, 5485.0, 1955.0, 1968.5, 5877.5, 336.75, 3460.0, 337.75, 1228.75, 1211.75, 1210.5, 1216.25, 1542.5, 1537.0, 1570.0, 338.75, 2249.75, 2248.25, 2320.0, 2439.0, 2512.75, 352.75, 1086.25, 1064.5, 1066.0, 1073.0, 1089.75, 4507.0, 4539.75, 4435.75, 346.75, 1072.5, 1084.75, 1363.25, 4219.0, 4211.0, 347.75, 309.5, 4173.25, 4135.0, 3068.5, 2554.5, 2543.75, 3984.0, 2866.5, 312.5, 3930.25, 1797.5, 1905.75, 1943.5, 3829.5, 3649.25, 3855.0, 315.0, 3825.5, 3809.25, 3792.25, 3791.25, 3791.25, 3788.25, 318.75, 3756.5, 3767.25, 3755.5, 3754.5, 3753.5, 3756.5, 3771.25, 3768.25, 3770.25, 3770.25, 3770.25, 3781.25, 3803.25, 3792.25, 3809.25, 3819.25, 3828.0, 3825.0, 3851.0, 3851.0, 3852.0, 3841.0, 3880.0, 3866.0, 3894.75, 3946.25, 4133.5, 2437.0, 2764.75, 1637.25, 1603.25, 1578.5, 1535.0, 1506.25, 1436.5, 1382.75, 1327.0, 1312.0, 1276.0, 1232.25, 1189.5, 1181.5, 1152.5, 1119.75, 1086.75, 1079.0, 1056.0, 1030.0, 1004.25, 996.25, 980.25, 958.25, 937.5, 933.5, 919.5, 900.5, 883.75, 879.75, 867.75, 864.75, 853.75, 850.75, 841.75, 112.25, 117.25, 113.25, 112.25, 111.25, 835.75, 829.75, 827.0, 117.25, 111.25, 0.0, 0.0, 0.0, 826.0, 818.0, 123.25, 0.0, 110.25, 0.0, 0.0, 814.0, 810.0, 806.0, 120.25, 0.0, 110.25]

    flats = get_flats(data)

    print(flats)

    for flat in flats:
        if flat[Flat.end_angle] > front_angle and flat[Flat.start_angle] < front_angle:
            if data[front_angle] > 200:
                return drive_to_flat_L_end(flat)
            return 127,127
        print("no flat stright agead...")
        return 127,127


def drive_to_flat_L_end(flat:list):
    if angle_deviation(flat[Flat.start_angle],front_angle):
        return speed1,speed1
    if flat[Flat.start_angle] < front_angle:
        return speed2,speed1

def drive_to_flat_R_end(flat:list):
    if angle_deviation(flat[Flat.end_angle],front_angle):
        return speed1,speed1
    if flat[Flat.end_angle] > front_angle:
        return speed1,speed2

def angle_deviation(is_angle,should_angle):
    diviation = 10
    if abs(should_angle - should_angle) <= 10:
        return True
    return False


def get_flats(data):
    threshold_dist = 100
    threshold_angle = 10
    found_flats = []
    count = 0
    previous_dist = abs(data[0])
    #reduce FOV to 180Â°
    data = data[90:270]
    for angle,point in enumerate(data):
        if angle > 0 and angle < len(data):
            delta_distance =abs(data[angle] - data[angle-1])
            if delta_distance < threshold_dist:
                count +=1
                #print(delta_distance , angle)
            else:
                previous_dist = abs(data[angle-1])
                if abs(previous_dist - data[angle+3]) < threshold_dist:
                    if count > threshold_angle:
                        #forman: amaunt of points in flat, start angle of flat, end angle of flat, distance
                        found_flats.append([count,start_angle,angle,point])
                    start_angle = angle+1
                    count = 0
    return found_flats


if __name__ == "__main__":
    contest_pop_loon()


